//This is the definition of the joints in the arm

///Definition of SternoClavicular joint SC joint
AnyKinRotational SCRot = {
  AnyRefNode &thorax_sc = ..ShoulderRef.scj;
  AnyRefNode &clavicula_sc = ..Seg.Clavicula.scj;    
  Type = RotAxesAngles;
  Axis1 = y;
  Axis2 = z;
  Axis3 = x;
}; 

AnyKinLinear SCLin = {
  AnyRefNode &thorax_sc = ..ShoulderRef.scj;
  AnyRefNode &clavicula_sc = ..Seg.Clavicula.scj;    
  Ref=0;
}; 

AnyKinEq SCLinCon = {
  AnyKinMeasure &SCLinCon = .SCLin;
};


///Defintion of AC joint
AnyKinRotational ACRot = {
  AnyRefNode &clavicula_ac = ..Seg.Clavicula.acj;
  AnyRefNode &scapula_ac = ..Seg.Scapula.acj;
  Type = RotAxesAngles;
  Axis1 = y;
  Axis2 = z;
  Axis3 = x;
}; 

AnyKinLinear ACLin = {
  AnyRefNode &clavicula_ac = ..Seg.Clavicula.acj;
  AnyRefNode &scapula_ac = ..Seg.Scapula.acj;
  Ref=0;
}; 

AnyKinEq ACLinCon = {
  AnyKinMeasure &SCLinCon =.ACLin;
};

///Definition of GH joint (pas tout a fait:jamais utilise en vrai...)
AnyKinRotational GHRot = {
    AnyRefNode &scapula_gh = ..Seg.Scapula.gh;
  AnyRefNode &humerus_gh = ..Seg.Humerus.gh;
  Type = RotAxesAngles;
//#if Xu==1
//  Axis1 = y;
//  Axis2 = z;
//  Axis3 = y;
//#else
  Axis1 = x;
  Axis2 = z;
  Axis3 = y;
//#endif
}; 
AnyKinLinear GHLin = {
  AnyRefNode &scapula_gh = ..Seg.Scapula.gh.ghProth;
  AnyRefNode &humerus_gh = ..Seg.Humerus.gh;
  Ref=0; //use this for shifting between the two ref systems: scapula=0, humerus=1
}; 
//This file includes the glenohumeral reactions created by a number of pushing muscles
////if this file is not include the normal reactions of the GH joint should be set to "On On On"6
#if BallAndSocket==1 | stl==0
  #include "GHReactions.any"
#endif

// Driver GH dans le cas du ball&Socket OU du FDK
AnyKinEqSimpleDriver GHLinCon = {
  AnyKinMeasure &ref = .GHLin;
  DriverPos = {Main.InputVariables.JointPosition.px,Main.InputVariables.JointPosition.py,Main.InputVariables.JointPosition.pz}; //px, py et pz definis dans InputVariables.any
  DriverVel = {0,0,0};
  
  #if BallAndSocket==1
    Reaction.Type={Off,Off,Off};
    CType = {Soft,Soft,Soft};
  #endif
 
  #if BallAndSocket==0
  //      Reaction.Type={On, Off,Off};
  //      CType = {Soft,ForceDep,ForceDep};
    Reaction.Type={Off, Off,Off};
    CType = {ForceDep,ForceDep,ForceDep};
  #endif
};


#if BallAndSocket==0

  AnyForce SpringForce = {
    AnyFloat Eps = {
      .GHLin.Pos[0]-Main.InputVariables.JointPosition.px,
      .GHLin.Pos[1]-Main.InputVariables.JointPosition.py,
      .GHLin.Pos[2]-Main.InputVariables.JointPosition.pz
    };
    
    AnyKinLinear &ref = .GHLin;
          
    // non linear model
    AnyFloat k0 = Main.InputVariables.SettingValues.FDK.k0;
    AnyFloat k1 = Main.InputVariables.SettingValues.FDK.k1;
    AnyFloat k2 = Main.InputVariables.SettingValues.FDK.k2;
    AnyFloat k3 = Main.InputVariables.SettingValues.FDK.k3;
    AnyFloat k4 = Main.InputVariables.SettingValues.FDK.k4;
    AnyFloat kz = Main.InputVariables.SettingValues.FDK.kz;
    
    F={ 
      -(k0 + k1*Eps[0] + k2*Eps[0]^2 + k3*Eps[0]^3 + k4*Eps[0]^4), 
      -(k0 + k1*Eps[1] + k2*Eps[1]^2 + k3*Eps[0]^3 + k4*Eps[1]^4),
      -kz*Eps[2]
    };
  };
#endif

#if stl==1
AnyForceSurfaceContact ProtheseContact = {
  AnySurfSTL &master = ..Seg.Humerus.HumerusBoneGeometryNode.HumImplantPos.ProtHumSTL;
  AnySurfSTL &slave = ..Seg.Scapula.GlenImplantPos.GleneSTL;
  PressureModule = Main.InputVariables.SettingValues.Contact.kd;
  ForceViewOnOff = On;
  
  AnyDrawForceSurface drw = {
    Visible = On;
    //Opacity = 1;
    //DrawSurf1RGB = {0, 0, 0};
    //DrawSurf2RGB = {1, 1, 1};
    //AnyStyleDrawMaterial &<Insert name0> = <Insert object reference (or full object definition)>; You can make any number of these objects!
  };

  AnyDrawLine drwForceContact = {
    p0 =  p1 - .Fslave / 20000;
    p1 =.COP;
    Line = {
      Style = Line3DStyleFull;
      Thickness = 0.001;
      RGB = {1, 0, 0};
      Start = {
        Style = Line3DCapStyleNone;
        RGB = {1, 0, 0};
        Thickness = 0;
        Length = 0;
      };
      End = {
        Style = Line3DCapStyleArrow;
        RGB = {1, 0, 0};
        Thickness = 0.002;
        Length = 0.002;
      };
    };
    // Text = "F_contact";
    
    AnyRefFrame &G = Main.Model.EnvironmentModel.GlobalRef;
  };

};
#endif

// #include "DrawContactForces.any"

//Definition of elbow flexion extension joint
AnyRevoluteJoint FE = {
  Axis = x;
  AnyRefNode &HumerusFE = ..Seg.Humerus.fe;
  AnyRefNode &UlnaFE = ..Seg.Ulna.fe;
  
  
};//End FE


//Next three definitions equal to spherical joint 
//Definition of proximal forearm pronation supination joint 
AnyKinRotational PSRotProximal = {
  Axis1 = x;
  Axis2 = y;
  Axis3 = z;
  Type = RotAxesAngles;
 
  AnyRefNode &RadiusPs = ..Seg.Radius.PointPS2;
  AnyRefNode &UlnaPs = ..Seg.Ulna.ps2;
};//End pronation supination joint proximal

//Definition of forearm pronation supination joint 
AnyKinLinear PSLinProximal = {
  Ref=0;
  
  AnyRefNode &UlnaPs = ..Seg.Ulna.ps2;
  AnyRefNode &RadiusPs = ..Seg.Radius.PointPS2;
};//End pronation supination joint proximal

AnyKinEq PSProximalConstraints = {
  AnyKinLinear &Jnt = .PSLinProximal; 
  Reaction.Type = {Off,Off,Off};
};

AnyReacForce PSProximalReacForce = 
{
  AnyKinMeasureOrg RadiusHumerus = {
    MeasureOrganizer = {0};
    AnyKinLinear Lin = 
    {
      Ref = 0;
      AnyRefFrame &Radius = ....Seg.Radius.PointPS2.PointPS2Rot.PS2Reac;
      AnyRefFrame &Humerus = ....Seg.Humerus.fe;
    };
  };
  
  AnyKinMeasureOrg RadiusUlna = {
    MeasureOrganizer = {0,2};
    AnyKinLinear Lin = 
    {
      Ref = 0;
      AnyRefFrame &Ulna = ....Seg.Ulna.ps2.ps2Reac;
      AnyRefFrame &Radius = ....Seg.Radius.PointPS2.PointPS2Rot.PS2Reac;
    };
  };
};


//This is measure which will be used by the applications
AnyKinMeasureOrg PS = {
  AnyKinRotational &Jnt = .PSRotProximal;
  MeasureOrganizer = {0};
};
//End definitions of spherical joint

AnyKinEq PSLinDistalConstraint = {
  
  //Definition of distal forearm pronation supination joint 
  AnyKinLinear PSLinDistal = {
    Ref = 0; //Uses coordinate system of the first defined segment

    AnyRefNode &UlnaPs = ...Seg.Ulna.ps2.usRot;
    AnyRefNode &RadiusPs = ...Seg.Radius.PS;
  };//End pronation supination joint distal
  MeasureOrganizer = {0,2};
};

//
// //Definition of wrist joint
//AnyUniversalJoint WristJoint = {
//  Axis1 = y; //flexion extension
//  Axis2 = z; //abduction adduction
//  AnyRefNode &radius_wj = ..Seg.Radius.wj;
//  
//  AnyRefNode &hand_wj =..Seg.Hand.wj;
//  
//  radius_wj={AnyDrawRefFrame drw={};};
//  hand_wj={AnyDrawRefFrame drw={};};
//
//};//End WristJoint
//



////Definition of wrist joint
AnyRevoluteJoint WristJointFlexion = {
  Axis = y; //flexion extension
  AnyRefNode &radius_wj = ..Seg.Radius.wj;
  AnyRefNode &hand_wj =..Seg.WristJointSeg.FlexionExtensionAxis;
};//End WristJoint

AnyRevoluteJoint WristJointDeviation = {
  Axis = z; //radial ulnar deviation
  AnyRefNode &radius_wj = ..Seg.WristJointSeg.RadialUlnarDeviation;
  AnyRefNode &hand_wj =..Seg.Hand.HandRef.wj;
};//End WristJoint


AnyKinEqSimpleDriver ScapulaAIThoraxNodeDriver = {
  
  AnyKinPointSurface Measure1 = {
    AnyRefFrame &r1 = ...Seg.Scapula.ai;
    AnySurface &s1 = ...ShoulderRef.ScapulaEllipsoidOrigin.Elipse;
  };
  
  DriverPos = {0};
  DriverVel = {0};
  Reaction.Type = {Off};
};


//Replaced by rhythm.
//AnyKinEqSimpleDriver ScapulaTSThoraxNodeDriver = {
//  
//  AnyKinPointSurface Measure1 = {
//    AnyRefFrame &r1 = ...Seg.Scapula.ts;
//    AnySurface &s1 = ...ShoulderRef.ScapulaEllipsoidOrigin.Elipse;
//    NormedMeasureOnOff = Off;
//  };
//  
//  DriverPos = {0};
//  DriverVel = {0};
//  Reaction.Type = {Off};
//};


#include "ThoraxScapulaContactReaction.any"


//Simple muscle model 
AnyMuscleModel ReactionMuscle = {
  F0 = 5000;
};



//Definitions of ligaments
AnyKinPLine ConoideumLigament = {
  AnyRefNode &scapula = ..Seg.Scapula.conoid;
  AnyRefNode &clavicle = ..Seg.Clavicula.conoid;   
  // AnyDrawPLine drwline= {Thickness=0.005;RGB={1,0,0};};
};


//Replaced by rhythm
//AnyKinEqSimpleDriver ConoideumLigamentDrv ={
//  //This is the position of origo of clavicula unscaled
//  AnyVec3  ClaviculaRStd=(-..Seg.Clavicula.NeutralPositionOnPelvis.StandardsRel*..Seg.Clavicula.Mirror)*..Seg.Clavicula.NeutralPositionOnPelvis.Clavicula_Axes';
//  
//  //This the position of conoid node on clavicual unscaled
//  AnyVec3  ClaviculaConoidR=ClaviculaRStd+ (..Seg.Clavicula.ConoidStd*..Seg.Clavicula.Mirror)*..Seg.Clavicula.NeutralPositionOnPelvis.Clavicula_Axes';
//  
//  //This is the position of origo of Scapula unscaled
//  AnyVec3  ScapulaRStd=(-..Seg.Scapula.NeutralPositionOnPelvis.StandardsRel*..Seg.Scapula.Mirror)*..Seg.Scapula.NeutralPositionOnPelvis.Scapula_Axes';
//  // ScapulaRStd = {0.012783, 0.425831, 0.181893};
//  
//  //This the position of conoid node on clavicual unscaled
//  AnyVec3  ScapulaConoidR=ScapulaRStd+ (..Seg.Scapula.ConoidStd*..Seg.Scapula.Mirror)*..Seg.Scapula.NeutralPositionOnPelvis.Scapula_Axes';
//  //ScapulaConoidR = {0.024835, 0.413580, 0.137568};
//  
//  AnyVec3 StandardConoidVector= ClaviculaConoidR-ScapulaConoidR;
//  AnyFunTransform3D &Scale=..Scaling.GeometricalScaling.Trunk.ScaleFunction;
//  AnyVec3 ScaledStdConoidVector=Scale(StandardConoidVector);
//  AnyVar ScaleStdConoidVectorLenght=((ScaledStdConoidVector[0])^2+(ScaledStdConoidVector[1])^2+(ScaledStdConoidVector[2])^2)^0.5;
//  
//  AnyKinPLine &ref=.ConoideumLigament;
//  DriverPos={ScaleStdConoidVectorLenght};
//  //DriverPos={ 0.020341};
//  DriverVel={0};
//  Reaction.Type={Off};
//};


//Artificial muscle will produce reaction in the ligament
AnyMuscleViaPoint ConoidLigamentReaction = {
  AnyRefNode &scapula = ..Seg.Scapula.conoid;
  AnyRefNode &clavicle = ..Seg.Clavicula.conoid; 
  AnyMuscleModel &ref = .ReactionMuscle; 
  // AnyDrawMuscle drwlig = {RGB={0,0,1};MaxStress = 75000000.000000;};
};
//Artificial muscle will produce reaction in the ligament
AnyMuscleViaPoint TrapezoidLigamentReaction = {
  AnyRefNode &scapula = ..Seg.Scapula.trapezoid;
  AnyRefNode &clavicle = ..Seg.Clavicula.trapezoid;   
  AnyMuscleModel &ref = .ReactionMuscle; 
  // AnyDrawMuscle drwlig = {RGB={0,0,1};MaxStress = 75000000.000000;};
};



//************ Shoulder Rhythm **********************

AnyKinEqSimpleDriver ClaviculaProtractionDriver = 
{
  AnyKinMeasureLinComb ClaviculaProtractionRhythm = 
  {
    AnyKinMeasureOrg &ClaviculaProtraction = ...InterfaceFolder.SternoClavicularProtraction;
    AnyKinMeasureOrg &HumerusElevation = ...InterfaceFolder.GlenohumeralAbduction;
    AnyKinMeasureOrg &HumerusFlexion = ...InterfaceFolder.GlenohumeralFlexion;
    OutDim = 1;
    Coef = {{1, 0.242, -0.12}};
    Const = -1*{(-4.983*pi/180)+0.851*(-0.401)+(10*pi/180)}; // initial position -0.401 rad + correction of +10deg
  };
  DriverPos = {0};
  DriverVel = {0};
  Reaction.Type = {Off};
};



AnyKinEqSimpleDriver ClaviculaElevationDriver = 
{
  AnyKinMeasureLinComb ClaviculaElevationRhythm = 
  {
    AnyKinMeasureOrg &ClaviculaElevation = ...InterfaceFolder.SternoClavicularElevation;
    AnyKinMeasureOrg &HumerusElevation = ...InterfaceFolder.GlenohumeralAbduction;
    AnyKinMeasureOrg &HumerusFlexion =...InterfaceFolder.GlenohumeralFlexion;
    OutDim = 1;
    Coef = {{1, -0.123, 0.046}};
    Const = -1*{(3.917*pi/180)+0.493*(0.201)-(6*pi/180)}; // initial position 0.201 rad + correction of -6deg
  };
  DriverPos = {0};
  DriverVel = {0};
  Reaction.Type = {Off};
};


AnyKinEqSimpleDriver ClaviculaAxialRotationDriver = 
{
  AnyKinMeasureLinComb ClaviculaAxialRotationRhythm = 
  {
    AnyKinMeasureOrg &ClaviculaAxialRotation = ...InterfaceFolder.SternoClavicularAxialRotation;
    AnyKinMeasureOrg &HumerusElevation = ...InterfaceFolder.GlenohumeralAbduction;
    OutDim = 1;
    Coef = {{1, -0.422}};
    Const = -1*{-0.423};   // initial position -0.349 rad, constant found by iteration (data non available)
  };
  DriverPos = {0};
  DriverVel = {0};
  Reaction.Type = {Off};
};





AnyKinEqSimpleDriver ScapulaProtractionDriver = 
{
  AnyKinMeasureLinComb ScapulaProtractionRhythm = 
  {
    AnyKinMeasureOrg &ScapulaProtraction = ...InterfaceFolder.ScapulaThoraxProtraction;
    AnyKinMeasureOrg &HumerusElevation = ...InterfaceFolder.GlenohumeralAbduction;
    AnyKinMeasureOrg &HumerusFlexion = ...InterfaceFolder.GlenohumeralFlexion;
    OutDim = 1;
    Coef = {{1, 0.049*...Sign, -0.14*...Sign}};
    Const = -...Sign*{(-1.203*pi/180)+0.901*(0.33)+(10*pi/180)}; // initial position 0.33 rad + correction of +10deg
  };
  DriverPos = {0};
  DriverVel = {0};
  Reaction.Type = {Off};
};



AnyKinEqSimpleDriver ScapulaElevationDriver = 
{
  AnyKinMeasureLinComb ScapulaElevationRhythm = 
  {
    AnyKinMeasureOrg &ScapulaElevation = ...InterfaceFolder.ScapulaThoraxElevation;
    AnyKinMeasureOrg &HumerusElevation = ...InterfaceFolder.GlenohumeralAbduction;
    AnyKinMeasureOrg &HumerusFlexion = ...InterfaceFolder.GlenohumeralFlexion;
    OutDim = 1;
    Coef = {{1, -0.396*...Sign, 0.079*...Sign}};
    Const = -...Sign*{(3.095*pi/180)+0.414*(0.307)-(10*pi/180)}; // initial position 0.307 rad + correction of -10deg
  };
  DriverPos = {0};
  DriverVel = {0};
  Reaction.Type = {Off};
};





